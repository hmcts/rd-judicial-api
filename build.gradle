buildscript {
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.3.6")
    }
}

plugins {
    id 'application'
    id 'jacoco'
    id 'pmd'
    id 'com.github.ben-manes.versions' version '0.27.0'
    id "info.solidsoft.pitest" version '1.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.sonarqube' version '3.1.1'
    id 'org.springframework.boot' version '2.4.12'
    id "org.flywaydb.flyway" version "6.5.1"
    id "io.freefair.lombok" version "4.1.6"
    id 'uk.gov.hmcts.java' version '0.12.0'
    id 'au.com.dius.pact' version '4.1.7'
}

apply plugin: 'java'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'project-report'
apply plugin: 'idea'

def versions = [
        lombok             : '1.18.20',
        gradlePitest       : '1.3.0',
        pitest             : '1.5.1',
        reformHealthStarter: '0.0.5',
        reformLogging      : '5.1.7',
        reformS2sClient    : '4.0.0',
        serenity           : '2.0.76',
        sonarPitest        : '0.5',
        springBoot         : '2.4.12',
        springHystrix      : '2.1.1.RELEASE',
        springfoxSwagger   : '2.9.2',
        restAssured        : '4.3.3',
        jackson            : '2.12.1',
        launchDarklySdk    : '5.2.2',
        pact_version       : '4.1.7'
]

mainClassName = 'uk.gov.hmcts.reform.judicialapi.JudicialApplication'
def jarName = 'rd-judicial-api.jar'

group = 'uk.gov.hmcts.reform.juddata'
version = '0.0.1'

sourceCompatibility = 11
targetCompatibility = 11

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

sourceSets {

    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }

    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

    smokeTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }

    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }

    pactTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/pactTest/java')
        }
        resources.srcDir file('src/pactTest/resources')
    }
}

idea {
    module {
        testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
        testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
        testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
        testSourceDirs += project.sourceSets.functionalTest.resources.srcDirs
        testSourceDirs += project.sourceSets.smokeTest.java.srcDirs
        testSourceDirs += project.sourceSets.smokeTest.resources.srcDirs
    }
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

task contract(type: Test) {
    description = 'Runs the consumer Pact tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    include "uk/gov/hmcts/reform/judicialapi/**"
}

task runProviderPactVerification(type: Test) {
    useJUnitPlatform()
    logger.lifecycle("Runs pact Tests")
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    systemProperty 'pact.verifier.publishResults', System.getProperty('pact.verifier.publishResults')
    systemProperty 'pact.provider.version', project.pactVersion
}

runProviderPactVerification.dependsOn contract

runProviderPactVerification.finalizedBy pactVerify

pact {
    publish {
        pactDirectory = 'pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
        version = project.pactVersion
    }
}

configurations {
    integrationTestImplementation.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    functionalTestImplementation.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
}

pmd {
    toolVersion = '6.12.0'
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest, sourceSets.functionalTest, sourceSets.smokeTest]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = [
            'category/java/errorprone.xml',
            'category/java/bestpractices.xml'
    ]
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {

    systemProperty "scenario", System.getProperty('scenario')

    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    finalizedBy aggregate
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
}

task migratePostgresDatabase(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    baselineOnMigrate = true
    if (project.hasProperty("dburl")) {
        url = "jdbc:postgresql://${dburl}"
    }
}

task fortifyScan(type: JavaExec)  {
  main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    executionData(test)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.judicialapi.*']
    testSourceSets = [sourceSets.integrationTest, sourceSets.test]
    excludedClasses = [
            'uk.gov.hmcts.reform.judicialapi.configuration.*',
            'uk.gov.hmcts.reform.judicialapi.controller.*',
            'uk.gov.hmcts.reform.judicialapi.JudicialApplication',
            'uk.gov.hmcts.reform.judicialapi.repository.IdamUserProfileRepository',
            'uk.gov.hmcts.reform.judicialapi.service.impl.IdamUserProfileServiceImpl'

    ]
    threads = 10
    enableDefaultIncrementalAnalysis = true
    historyInputLocation = 'build/reports/pitest/fastermutationtesting'
    historyOutputLocation = 'build/reports/pitest/fastermutationtestingoutput'
    outputFormats = ['XML', 'HTML']
    timestampedReports = true
    mutationThreshold = 90
    useClasspathFile = true
}


project.tasks['pitest'].group = "Verification"

sonarqube {
    properties {
        property "sonar.projectName", "RD :: Judicial Reference api"
        property "sonar.projectKey", "RDJUDICIALAPI"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
        property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/judicialapi/configuration/**," +
                "src/main/java/uk/gov/hmcts/reform/judicialapi/JudicialApplication.java,"+
                "src/main/java/uk/gov/hmcts/reform/judicialapi/domain/**," +
                "src/main/java/uk/gov/hmcts/reform/judicialapi/controller/request/**," +
                "src/main/java/uk/gov/hmcts/reform/judicialapi/controller/TestingSupportController.java," +
                "src/main/java/uk/gov/hmcts/reform/judicialapi/controller/feign/IdamUserFeignClient.java," +
                "src/main/java/uk/gov/hmcts/reform/judicialapi/controller/response/**," +
                "src/main/java/uk/gov/hmcts/reform/judicialapi/service/impl/IdamUserProfileServiceImpl.java," +
                "src/main/java/uk/gov/hmcts/reform/judicialapi/repository/IdamUserProfileRepository.java"
    }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
project.tasks['sonarqube'].group = "Verification"

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

dependencies {

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.10'

    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
    integrationTestImplementation group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
    integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.10'

    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot

    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '3.0.2'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: versions.springHystrix

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: versions.springBoot

    compile group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.8.5'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.2'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.10.2'
    compile group: 'javax.inject', name: 'javax.inject', version: '1'
    compile "org.springframework.boot:spring-boot-starter-oauth2-client"
    compile "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    compile group: 'uk.gov.hmcts.reform', name: 'idam-client', version: '2.0.0'
    compile group: 'io.github.openfeign.form', name: 'feign-form', version: '3.8.0'
    compile group: 'io.github.openfeign.form', name: 'feign-form-spring', version: '3.8.0'

    implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '2.3.3'

    implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

    implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'
    implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.reformS2sClient

    compile group: 'org.flywaydb', name: 'flyway-core', version: '6.5.1'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.14'
    compile group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: versions.launchDarklySdk
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    compile group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '8.20'
    implementation "io.github.openfeign:feign-httpclient:11.0"
    implementation 'org.springframework.boot:spring-boot-starter-validation'


    implementation group: 'com.google.guava', name: 'guava', version: '30.0-jre'
    //Fix for CVE-2021-29425
    implementation 'commons-io:commons-io:2.8.0'

    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: '3.3.0'

    testImplementation("org.hamcrest:hamcrest-junit:2.0.0.0") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
        exclude group: "org.hamcrest", module: "hamcrest-library"
    }

    testImplementation group: 'com.h2database', name: 'h2'
    testImplementation "com.github.tomakehurst:wiremock:2.21.0"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.4.6'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.4.6'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
    testImplementation group: 'com.github.mifmif', name: 'generex', version: '1.0.2'

    testImplementation 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'
    testImplementation group: 'org.pitest', name: 'pitest', version: versions.pitest
    testImplementation 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.4.6'

    testCompile (group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity)
    testCompile (group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity)
    testCompile (group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity)
    testCompile (group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity)
    testCompile 'com.github.hmcts:fortify-client:1.2.0:all'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot


    testImplementation(group: 'org.yaml', name: 'snakeyaml') {
        version {
            strictly '1.25'
        }
    }

    integrationTestImplementation(group: 'org.yaml', name: 'snakeyaml') {
        version {
            strictly '1.23'
        }
    }

    functionalTestImplementation(group: 'org.yaml', name: 'snakeyaml') {
        version{
            strictly '1.25'
        }
    }

    contractTestCompile group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestRuntime group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version

    contractTestCompile("org.junit.jupiter:junit-jupiter-api:5.7.1")
    contractTestRuntime("org.junit.jupiter:junit-jupiter-engine:5.7.1")
    contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.7.1')
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pact_version

    integrationTestImplementation sourceSets.main.runtimeClasspath
    integrationTestImplementation sourceSets.test.runtimeClasspath

    functionalTestImplementation sourceSets.main.runtimeClasspath
    functionalTestImplementation sourceSets.test.runtimeClasspath

    smokeTestImplementation sourceSets.main.runtimeClasspath
    smokeTestImplementation sourceSets.test.runtimeClasspath

    contractTestCompile sourceSets.main.runtimeClasspath
    contractTestCompile sourceSets.test.runtimeClasspath

    pactTestCompile sourceSets.main.runtimeClasspath
    pactTestCompile sourceSets.test.runtimeClasspath
}

dependencyManagement {

    dependencies {
        // CVE-2021-42340
        dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.54') {
            entry 'tomcat-embed-core'
            entry 'tomcat-embed-el'
            entry 'tomcat-embed-websocket'
        }
    }
}

dependencyCheck {
    suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

gradle.startParameter.continueOnFailure = true

bootJar {
    archiveFileName = jarName
    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

// this is required to force Java running on the Azure Windows Server OS into using
// UTF-8 as the default character set instead of windows-1252 which causes issues.
// this setting only applies when running via gradle bootRun -- see web.config for the
// java flag that configures the deployed applications
applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]
